<problem>
  <text>
    <script type="loncapa/python">

# variable names and values
# if multiple variables, the number of values to test should be the same
variable_values = {'p':[0.1,0.2,0.3]}

# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1.
solution1 = "2"
solution2 = "1/p"

# Group all solutions into a list
solutions = [solution1, solution2]


# hint id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<h3>Roll n die; how many sixes appear?</h3><p>Let \(X\) be the number of \(6\)'s. We've already analyzed the distribution of \(X\), so</p><p>\[ E(X) =<br />\sum_{k = 0}^n k \, \mbox{Pr}(X = k)\]\[=  \sum_{k = 0}^n k {n \choose k} \left(\frac{1}{6} \right)^k \left( \frac{5}{6} \right)^{n-k} \]\[ = \frac{n}{6}\]</p><p>The last step is somewhat mysterious; just take our word for it, and we'll get back to it later!</p><hr /><h3>Toss a fair coin forever; how many tosses to the first heads?</h3><p>Let \(X \in {1,2,\ldots}\) be the number of tosses until you first see heads. Then</p><p>\[ \mbox{Pr}(X = k) =<br />\mbox{Pr}((T,T,T,\ldots,T,H)) =<br />\frac{1}{2^k}\]</p><p>It follows that </p><p>\[ \mathbb{E}(X) =<br />\sum_{k=1}^\infty \frac{k}{2^k} = \]</p>

    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>To answer this question we need the following formulas for the infinite geometric series: for any  \(0 &lt; r &lt; 1\)</p><p>\[ r + r^2 + \cdots = \frac{r}{1-r} \]</p><p>and</p><p>\[ r + 2r^2 + 3r^3+\cdots \ = \ \frac{r}{(1-r)^2}\]</p><p>You can find these and other useful sums here:http://en.wikipedia.org/wiki/List_of_mathematical_series#Low-order_polylogarithms</p><hr /><h3>Toss a coin with bias \(p\) forever; how many tosses to the first heads?</h3><p>Once again, \(X \in {1,2,\ldots}\), but this time the distribution is different:</p><p>\[ \mbox{Pr}(X = k) = \mbox{Pr}((T,T,T,\ldots,T,H)) = (1-p)^{k-1}p \]</p><p>Using the same technique as before, we get \(\mathbb{E}(X) =\)</p>

    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>There's another way to derive this expectation. We always need at least one coin toss.If we're lucky (with probability \(p\)), we're done; otherwise (with probability \(1-p\)),we start again from scratch. Therefore \(\mathbb{E}(X) = 1 + (1-p) \mathbb{E}(X)\), and we have the same result.</p>
    
    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint_w_variables

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate_w_variables(expect, ans, variable_values)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint_w_variables(solutions[i], ans, hint_text_id, i, variable_values)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>