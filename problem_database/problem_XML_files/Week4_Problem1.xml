<problem>
  <text>
    <script type="loncapa/python">

# random variables (no need to import random library)
#false burglary percentage
atpt = random.randrange(92,96,1)
perc = atpt/100

#burglary percentage
fals = random.randrange(1,3,1)
fperc = fals/100
sol = (perc/10000)/(perc*0.0001+ fperc*0.9999)

# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1. 
solution1 = "1/10000"
solution2 = "{0}*0.0001 + {1}*0.9999".format(perc, fperc)
solution3 = "{0}*0.0001*100".format(perc)
solution4 = "{0}".format(sol)

# Group all solutions into a list
solutions = [solution1, solution2, solution3, solution4]


# hint text id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<h2>Bayes' Burglary</h2><p>o  The following example is taken from <em>Probabilistic Reasoning in Intelligent Systems</em> by Judea Pearl:</p><p>You wake up in the middle of the night to the shrill sound of your burglar alarm. What is the chance that a burglary attempt has taken place? The relevant facts are: </p><p>o  There is a $atpt% chance that an attempted burglary attempt will trigger the alarm. That is \[P(\mbox{alarm} | \mbox{burglary}) = $perc\]</p><p>o  There is a $fals% chance of a false alarm.\[P(\mbox{alarm} | \mbox{no burglary}) = $fperc\]</p><p>o  Based on local crime statistics, there is a one-in-10,000 chance that a house will be burglarized on a given night..  what is \(P(\mbox{burglary})\)</p>

    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>o  We are interested in the chance of a burglary given that the alarm has sounded. We can use the conditional probability formula for this:\[P(\mbox{burglary} | \mbox{alarm}) \ = \ \frac{P(\mbox{burglary, alarm})}{P(\mbox{alarm})} \ = \ \frac{P(\mbox{alarm} | \mbox{burglary}) P(\mbox{burglary})}{P(\mbox{alarm})}\]</p><p>o  The one term we don't immediately know is \(P(\mbox{alarm})\).  By the summation rule,\[P(\mbox{alarm}) \ = \ P(\mbox{alarm} | \mbox{burglary}) P(\mbox{burglary}) + P(\mbox{alarm} | \mbox{no burglary}) P(\mbox{no burglary})\]</p><p>.  What is \(P(\mbox{alarm})\)?</p>

    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>.  What is \(P(\mbox{burglary}, \mbox{alarm})*100\)</p>

    <customresponse cfn="check" expect="\[$solution3\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>.  Putting it all together, using the conditional probability definition mentioned above, what is\[P(\mbox{burglary} | \mbox{alarm})\]</p>

    <customresponse cfn="check" expect="\[$solution4\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>Thus our belief in a burglary has risen approximately a hundredfold from its default value of \(10^{-4}\)  on account of the alarm.It is frequently the case, as in this example, that we wish to update the chances of an event \(H\) based on new evidence \(E\)  In other words, we wish to know \(P(H | E)\)o  The derivation above implicitly uses the following formula, called Bayes Rule:\[P(H | E)\ = \ \frac{P(E|H) P(H)}{P(E)}\]</p><hr />
    
    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate(expect, ans)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint(solutions[i], ans, hint_text_id, i)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>