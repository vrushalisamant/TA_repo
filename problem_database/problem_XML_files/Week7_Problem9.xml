<problem>
  <text>
    <script type="loncapa/python">

# variable names and values
# if multiple variables, the number of values to test should be the same
variable_values = {'x':[20,50,80], 'n':[5000,2000,1250]}

# value index used to extract hint
index_of_test_value = 2

# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1.
solution1 = "1000*100/x"
solution2 = "100*1000/n"
solution3 = "100*(1000/n)*(1-1000/n)"
solution4 = "1-2*0.025"
solution5 = "1.96*sqrt(100*(1000/n)*(1-1000/n))"
solution6 = "1000*100/(x + sqrt(100))"
solution7 = "1000*100/(x - sqrt(100))"


# Group all solutions into a list
solutions = [solution1,solution2,solution3,solution4,solution5,solution6,solution7]

# hint id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<h2>Counting the number of fish in a lake.</h2><p>A lake contains an unknown number of fish. 1000 of them are caught, marked with red spots, and thenreturned to the water. Later, a random subset of 100 fish are caught from the lake, and it is foundthat \(x\) of them have red spots.</p><p>*1. In terms of \(x\), what estimate would you give for the number of fish in the lake?</p>

    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>*2. Let n be the true number of fish in the lake. Then distribution of the random variable X (the number of fish in your second sample of size 100), follows a Binomial distribution with what parameters?</p><p>\(\mathbb{E}(X) = \)</p>

    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>\(\mbox{var}(X) = \)</p>

    <customresponse cfn="check" expect="\[$solution3\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>*3. For standard normal random variable \(S\), what is \(P(-1.96 &lt; S &lt; 1.96)\)?</p>

    <customresponse cfn="check" expect="\[$solution4\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>*4. If you had to give a 95% confidence interval of \(\mathbb{E}(X)\) in terms of \(n\), what would it be?  </p><p>\(X\pm = \)</p>

    <customresponse cfn="check" expect="\[$solution5\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>*5. Use the approximation technique you learned from class, the confidence interval of \(n\) is</p><p>from</p>

    <customresponse cfn="check" expect="\[$solution6\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>to</p>

    <customresponse cfn="check" expect="\[$solution7\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>



    
    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint_w_variables

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate_w_variables(expect, ans, variable_values)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint_w_variables(solutions[i], ans, hint_text_id, i, variable_values)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>